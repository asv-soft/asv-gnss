using System;
using Asv.IO;

namespace Asv.Gnss;

/// <summary>
/// Data Item I020/260, ACAS Resolution Advisory Report
/// Definition: Currently active Resolution Advisory (RA), if any, generated by
/// the ACAS associated with the transponder transmitting the
/// report and threat identity data.
/// Format: Seven-octet fixed length Data Item.
/// </summary>
public class AsterixFieldI020Frn023Type260 : AsterixField
{
    public const byte StaticFrn = 23;
    private const string StaticName = "ACAS Resolution Advisory Report";
    
    public override string Name => StaticName;
    public override int Category => AsterixMessageI020.Category;
    public override byte FieldReferenceNumber => StaticFrn;

    private static StructType? type;
    public static StructType StructType => type ??= new StructType([
        MbDataField
    ]);

    private static readonly Field MbDataField = new Field.Builder()
        .Name(nameof(MbData))
        .Title("MB Data")
        .Description("56-bit message conveying Mode S Comm B message data of BDS Register 3,0")
        .DataType(new ArrayType(UInt8Type.Default, 7))
        .Build();

    /// <summary>
    /// 56-bit Mode S Comm B message data of BDS Register 3,0
    /// Contains the currently active Resolution Advisory data
    /// </summary>
    public byte[] MbData { get; } = new byte[7];

    public override void Deserialize(ref ReadOnlySpan<byte> buffer)
    {
        if (buffer.Length < 7)
            throw new ArgumentException("Buffer too small for ACAS Resolution Advisory Report", nameof(buffer));

        // Copy the 7 bytes of MB Data directly
        buffer[..7].CopyTo(MbData);
        buffer = buffer[7..];
    }

    public override void Serialize(ref Span<byte> buffer)
    {
        if (buffer.Length < 7)
            throw new ArgumentException("Buffer too small for ACAS Resolution Advisory Report", nameof(buffer));

        // Copy the 7 bytes of MB Data directly
        MbData.CopyTo(buffer);
        buffer = buffer[7..];
    }

    public override int GetByteSize() => 7;

    public override void Accept(IVisitor visitor)
    {
        ArrayType.Accept(visitor, MbDataField, (index, v, f, t) =>
        {
            var temp = MbData[index];
            UInt8Type.Accept(v, f, t, ref temp);
            MbData[index] = temp;
        });
    }

    /// <summary>
    /// Gets the MB Data as a 56-bit value (ulong with only lower 56 bits used)
    /// </summary>
    public ulong GetMbDataAsUInt64()
    {
        ulong result = 0;
        for (int i = 0; i < 7; i++)
        {
            result = (result << 8) | MbData[i];
        }
        return result;
    }

    /// <summary>
    /// Sets the MB Data from a 56-bit value (ulong with only lower 56 bits used)
    /// </summary>
    public void SetMbDataFromUInt64(ulong value)
    {
        // Ensure only 56 bits are used
        value &= 0x00FFFFFFFFFFFFFF;
        
        for (int i = 6; i >= 0; i--)
        {
            MbData[i] = (byte)(value & 0xFF);
            value >>= 8;
        }
    }

    /// <summary>
    /// Clears all MB Data (sets to zero)
    /// </summary>
    public void ClearMbData()
    {
        Array.Clear(MbData, 0, MbData.Length);
    }

    /// <summary>
    /// Checks if the field contains any non-zero data
    /// </summary>
    public bool HasData()
    {
        for (int i = 0; i < MbData.Length; i++)
        {
            if (MbData[i] != 0)
                return true;
        }
        return false;
    }
}