using System;
using System.Reactive.Linq;
using Xunit;

namespace Asv.Gnss.Test
{
    public class RTCMv3TestExt
    {
        [Fact]
        public void TestMsg1008()
        {
            var array = new byte[]
            {
                0xd3, 0x00, 0x1f, 0x3f, 0x00, 0x0d, 0x14, 0x4a, 0x41, 0x56,
                0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x47, 0x35, 0x54, 0x2b,
                0x47, 0x50, 0x20, 0x4a, 0x56, 0x47, 0x52, 0x00, 0x05, 0x30,
                0x33, 0x32, 0x30, 0x31, 0xec, 0xbd, 0x40
            };
            var parser = new RtcmV3Parser().RegisterExtendedMessages();
            RtcmV3MessageBase msg = null;
            parser.OnMessage.Cast<RtcmV3MessageBase>().Subscribe(_ => msg = _);
            foreach (var p in array)
            {
                parser.Read(p);
            }
            Assert.NotNull(msg);
            Assert.Equal("1008", msg.MessageStringId);
        }
        [Fact]
        public void TestMsg1033()
        {
            var array = new byte[]
            {
                0xd3, 0x00, 0x22, 0x40, 0x90, 0x00, 0x00, 0x00, 0x00, 0x09,
                0x48, 0x45, 0x4d, 0x49, 0x5f, 0x44, 0x46, 0x35, 0x72, 0x08,
                0x36, 0x2e, 0x30, 0x41, 0x61, 0x30, 0x35, 0x62, 0x08, 0x32,
                0x31, 0x38, 0x35, 0x30, 0x38, 0x34, 0x38, 0x02, 0x2e, 0x4e
            };
            var parser = new RtcmV3Parser().RegisterExtendedMessages();
            RtcmV3MessageBase msg = null;
            parser.OnMessage.Cast<RtcmV3MessageBase>().Subscribe(_ => msg = _);
            foreach (var p in array)
            {
                parser.Read(p);
            }
            Assert.NotNull(msg);
            Assert.Equal("1033", msg.MessageStringId);
        }
        [Fact]
        public void TestMsg1073()
        {
            var array = new byte[]
            {
                0xd3,0x00,0xb3,0x43,0x10,0x01,0x22,0x60,0x79,0xe2,0x00,0x20,0x04,0x1d,0x28,0x40,0x00,0x00,0x00,0x00,
                0x28,0x20,0x40,0x80,0xf9,0xff,0x90,0x48,0x1f,0x1f,0x46,0x48,0x78,0xcb,0x4c,0x35,0xd8,0x96,0x2c,0x10,
                0x13,0x67,0x27,0x0a,0x4c,0x4c,0x99,0x08,0x22,0x10,0x41,0x20,0x85,0x01,0x00,0x83,0x4f,0x04,0x5b,0xb5,
                0x77,0x6b,0xbe,0xd5,0x9d,0xab,0xf8,0xfc,0xbc,0xc2,0x7a,0x88,0xd3,0x67,0xa4,0x57,0xfa,0x3f,0xf1,0x7f,
                0xd9,0xa1,0x36,0x42,0x5f,0x05,0x44,0x0a,0x9c,0x17,0x8c,0x26,0xfb,0xf0,0x9b,0x9a,0x82,0x6e,0x5d,0x09,
                0xb2,0x98,0x03,0xab,0xb0,0x0f,0x04,0x00,0x39,0xd5,0x00,0xe7,0x54,0x03,0xa3,0xc0,0x0c,0x05,0x7d,0xa2,
                0xc6,0xf6,0x90,0x6b,0xda,0x24,0xbf,0x68,0x24,0x3c,0x2a,0xb5,0xfb,0x19,0x9b,0xf2,0x29,0xdf,0x43,0x18,
                0x7d,0x4a,0xa9,0xff,0x88,0x13,0xfe,0x4a,0xff,0xf8,0xd9,0x80,0x98,0x14,0x02,0x55,0xb8,0x09,0x42,0x30,
                0x25,0x09,0x80,0x93,0x7b,0xee,0xee,0xee,0xee,0xee,0x66,0x66,0xdb,0xc4,0xde,0xee,0x66,0x66,0x60,0x00,
                0x00,0x00,0x39,0x51,0xbd
            };
            var parser = new RtcmV3Parser().RegisterExtendedMessages();
            RtcmV3MessageBase msg = null;
            parser.OnMessage.Cast<RtcmV3MessageBase>().Subscribe(_ => msg = _);
            foreach (var p in array)
            {
                parser.Read(p);
            }
            Assert.NotNull(msg);
            Assert.Equal("1073", msg.MessageStringId);
        }
        [Fact]
        public void TestMsg1083()
        {
            var array = new byte[]
            {
                0xd3,0x00,0xb1,0x43,0xb0,0x01,0x30,0x59,0x1e,0xa2,0x00,0x20,0x41,0x8a,0x03,0x80,0x00,0x00,0x00,0x00,
                0x30,0xc0,0x00,0x00,0x7f,0xfe,0x7f,0xe7,0x63,0x05,0x06,0x05,0x8f,0xe3,0x9f,0x7f,0x70,0xb8,0x6b,0x7c,
                0xd7,0xf1,0xbc,0xbf,0x7a,0x00,0x97,0xf1,0x29,0x42,0xd3,0x05,0x9a,0xf3,0x84,0xe7,0x55,0xd6,0x93,0xac,
                0x77,0x0e,0x0e,0x0e,0xda,0xb6,0xf5,0x72,0x6c,0xf7,0xd9,0x67,0x8f,0xd7,0x1f,0xc6,0x5b,0xac,0xb7,0xbd,
                0x87,0x7b,0x23,0x9c,0x4d,0x36,0xf2,0x74,0x5b,0xd6,0x1a,0x2f,0x5d,0xf9,0xbd,0x77,0x23,0xf5,0xcf,0x2c,
                0x12,0x9b,0x90,0x4b,0x15,0x01,0x2e,0x4f,0x04,0xb2,0x7f,0xe7,0x2c,0xef,0x9b,0xb8,0x3e,0x6a,0xf4,0xf9,
                0xbf,0xfb,0xc7,0x41,0xcf,0x6b,0x9b,0x7d,0x2a,0x38,0xf5,0x21,0xa7,0xd5,0xca,0x8f,0x56,0x52,0xbc,0x7c,
                0xc3,0xf1,0xe8,0x9b,0xc7,0xe4,0x6f,0x1e,0xba,0xbe,0xc6,0x1a,0xfa,0xf9,0x04,0x40,0x90,0x50,0xdc,0x50,
                0x83,0x6e,0x93,0xbb,0xb4,0xee,0xee,0xee,0xee,0xdd,0xcc,0xa8,0xee,0xed,0xee,0x98,0x60,0x00,0x00,0x00,
                0x0b,0x67,0x9c
            };
            var parser = new RtcmV3Parser().RegisterExtendedMessages();
            RtcmV3MessageBase msg = null;
            parser.OnMessage.Cast<RtcmV3MessageBase>().Subscribe(_ => msg = _);
            foreach (var p in array)
            {
                parser.Read(p);
            }
            Assert.NotNull(msg);
            Assert.Equal("1083", msg.MessageStringId);
        }
        [Fact]
        public void TestMsg1093()
        {
            var array = new byte[]
            {
                0xd3,0x00,0x6c,0x44,0x50,0x01,0x22,0x60,0x79,0xe2,0x00,0x20,0x00,0x08,0x00,0xa1,0x40,0x00,0x00,0x00,
                0x04,0x00,0x80,0x80,0x7f,0xff,0xd7,0x6a,0xda,0xf5,0x59,0x98,0xb1,0x92,0x62,0xb1,0xc7,0x00,0x4d,0x14,
                0x99,0x99,0x41,0xa1,0x06,0xe2,0x09,0x44,0x7c,0x9d,0x44,0x3a,0xbc,0x79,0x2b,0xcc,0x6f,0x91,0x4f,0x40,
                0x5e,0x2b,0x01,0x78,0xb4,0xc3,0xe2,0xd6,0x50,0x4b,0x73,0x21,0x31,0x43,0x04,0xc5,0x62,0x08,0x4e,0x28,
                0x1f,0xb9,0x00,0x7e,0xf6,0x85,0xd9,0xf0,0x1c,0xdb,0x00,0x73,0x66,0x5f,0x94,0x17,0x7e,0x55,0x1f,0xf9,
                0x58,0x17,0x77,0x77,0x77,0x77,0x77,0x77,0x77,0x00,0x00,0xba,0x1f,0x50
            };
            var parser = new RtcmV3Parser().RegisterExtendedMessages();
            RtcmV3MessageBase msg = null;
            parser.OnMessage.Cast<RtcmV3MessageBase>().Subscribe(_ => msg = _);
            foreach (var p in array)
            {
                parser.Read(p);
            }
            Assert.NotNull(msg);
            Assert.Equal("1093", msg.MessageStringId);
        }
        [Fact]
        public void TestMsg1123()
        {
            var array = new byte[]
            {
                0xd3,0x00,0xb3,0x46,0x30,0x01,0x22,0x5f,0x9f,0x20,0x00,0x20,0x00,0x00,0x08,0x16,0x88,0x46,0x00,0x00,
                0x20,0x00,0x00,0x90,0xf7,0xaf,0xff,0xf8,0x4e,0xcd,0x65,0xe9,0x40,0xa4,0xa5,0x28,0x0b,0x5f,0xf1,0xe2,
                0x63,0xd0,0xbe,0x51,0x76,0x0c,0x39,0x98,0x7b,0x70,0x90,0x61,0x19,0xea,0x27,0xd2,0x64,0x55,0x88,0xb2,
                0x11,0x4c,0x82,0x84,0x3b,0xa8,0x78,0x34,0xee,0xbb,0xda,0xea,0xfe,0x3e,0x22,0x0c,0x25,0x77,0xbb,0xf2,
                0x07,0xe6,0xd5,0xcc,0x37,0x8e,0x78,0x43,0xb8,0x6b,0xd0,0xc7,0xa5,0x83,0x43,0x36,0x0c,0xaf,0x07,0xc1,
                0xff,0x4f,0x0c,0xed,0xbc,0x1e,0x2c,0xed,0xe5,0x53,0xe9,0x77,0xdf,0xbf,0x53,0x41,0x65,0x8b,0x05,0x78,
                0x1c,0x14,0xf5,0x20,0x36,0x4a,0x3e,0xd1,0x5c,0xfc,0x28,0xe7,0xee,0x49,0xbf,0xb9,0x46,0xfb,0xf1,0x33,
                0xf0,0xab,0x57,0xc2,0x1c,0x2e,0xfa,0xde,0xbc,0x8a,0xd1,0xf3,0x55,0x1f,0xcc,0x15,0xcf,0x1b,0xea,0xc1,
                0x2a,0x5d,0x03,0xab,0x31,0x57,0x77,0x7b,0x72,0xfb,0x97,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xaa,0x40,0x00,
                0x00,0x00,0x04,0x0d,0xc3
            };
            var parser = new RtcmV3Parser().RegisterExtendedMessages();
            RtcmV3MessageBase msg = null;
            //parser.OnError.Subscribe(_ =>
            //{
            //    var err = "ERR:" + _.Message;
            //    //_output.WriteLine("ERR:"+_.Message);
            //});
            parser.OnMessage.Cast<RtcmV3MessageBase>().Subscribe(_ => msg = _);
            foreach (var p in array)
            {
                parser.Read(p);
            }
            Assert.NotNull(msg);
            Assert.Equal("1123", msg.MessageStringId);
        }
    }
}